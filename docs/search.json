[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Final Project",
    "section": "",
    "text": "1 Introduction\nThe availability and quality of housing are critical indicators of a city’s livability and sustainability. As one of the largest and fastest-growing cities in Canada, Toronto faces significant challenges in maintaining affordable, safe, and high-quality housing for its residents.\nThe Apartment Building Evaluation database, provided by the City of Toronto, serves as a valuable resource for analyzing the quality of housing across the city. This dataset contains useful information, including the physical condition of buildings, availability of amenities, compliance with municipal standards, and management practices. These data points enable a comprehensive assessment of the factors that contribute to the evaluation scores of apartment buildings.\nWe chose this topic because housing is a fundamental human need, and understanding the quality of Toronto’s apartment buildings can shed light on broader issues related to urban living, social equity, and public policy. This analysis is particularly relevant given the rising concerns over housing affordability and safety in urban centers globally.\nThe questions we are interested in studying include:\nWhat patterns emerge in apartment building evaluations across Toronto?\nAre there geographical disparities in building quality within the city?\nWhat factors correlate most strongly with higher or lower evaluation scores?\nHow do building conditions align with socioeconomic indicators in different neighborhoods?",
    "crumbs": [
      "<span class='chapter-number'>1</span>  <span class='chapter-title'>Introduction</span>"
    ]
  },
  {
    "objectID": "data.html",
    "href": "data.html",
    "title": "2  Data",
    "section": "",
    "text": "2.1 Description\nThis dataset is available from the City of Toronto’s Open Data Portal, which comprises 3,571 entries and 71 columns. It is created for evaluations of apartment buildings across Toronto, assessing various quality and compliance metrics. The data is publicly accessible through the City of Toronto’s Open Data Portal.\nThe dataset is available in CSV format, which is easy to download and apply in R studio. Each row represents an individual apartment building evaluation, with columns detailing attributes such as building address, evaluation scores, compliance status, and inspection dates. The dataset is updated by the end of every year.\nThe dataset includes multiple columns capturing various aspects of apartment building evaluations. The number of rows corresponds to the total number of evaluated buildings, which may vary with each update. Key columns include:\nThe dataset contains a lot of missing values for variables including “FENCING”, “RETAINING WALLS”, “CATCH BASINS / STORM DRAINAGE”, “CLOTHING DROP BOXES”, “ACCESSORY BUILDINGS”, and so on. These variables might be deleted if missing values are dominant.\nTo import the dataset into R for analysis, first download the CSV file from the website, then use the read.csv() function to load the data.\nThe dataset is available on the City of Toronto’s Open Data Portal: [https://open.toronto.ca/dataset/apartment-building-evaluation/]\nCode\nbuilding &lt;- read.csv(\"Apartment Building Evaluations 2023 - current.csv\")\nCode\nshape &lt;- dim(building)\ncat(\"The dataset has\", shape[1], \"rows and\", shape[2], \"columns.\\n\")\n\n\nThe dataset has 3571 rows and 71 columns.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#description",
    "href": "data.html#description",
    "title": "2  Data",
    "section": "",
    "text": "Year Built: The year when the apartment was built.\nEvaluation Score: A numerical score representing the building’s quality assessment.\nWardname: The particular area where the apartment is located.\nProperty Type: The particular type of the apartment (private, social housing, Toronto community Housing Corporation).",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "data.html#missing-value-analysis",
    "href": "data.html#missing-value-analysis",
    "title": "2  Data",
    "section": "2.2 Missing value analysis",
    "text": "2.2 Missing value analysis\n\n\nCode\nsum(is.na(building))\n\n\n[1] 350\n\n\n\n\nCode\nlibrary(ggplot2)\nmissing_counts &lt;- colSums(is.na(building))\n\nmissing_df &lt;- data.frame(\n  Column = names(missing_counts),\n  Missing = missing_counts\n)\n\nmissing_df &lt;- missing_df[missing_df$Missing &gt; 0, ]\n\nggplot(missing_df, aes(x = reorder(Column, -Missing), y = Missing)) +\n  geom_bar(stat = \"identity\", fill = \"steelblue\") +\n  geom_text(aes(label = Missing), vjust = -0.5, color = \"black\") +\n  coord_flip() +\n  labs(\n    title = \"Missing Values by Column\",\n    x = \"Column\",\n    y = \"Number of Missing Values\"\n  ) +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nWe observed that 350 rows in the building dataset contain missing values, accounting for approximately 10% of the total entries. The columns with the highest number of missing values are Longitude and Latitude. Other columns with missing values include Year of Registration, Year Built, and the X and Y Coordinates of the building.\nGiven the large number of missing values in the Longitude and Latitude columns, and the fact that the dataset already encodes the address using X and Y coordinates, we have decided to drop the Longitude and Latitude columns from the dataset.\n\n\nCode\nbuilding_clean &lt;- building[, !colnames(building) %in% c(\"Longitude\", \"Latitude\")]\n\n\n\n\nCode\nrow_missing &lt;- rowSums(is.na(building_clean))\n\nggplot(data.frame(Missing = row_missing), aes(x = Missing)) +\n  geom_histogram(binwidth = 1, fill = \"steelblue\", color = \"black\") +\n  labs(title = \"Distribution of Missing Values per Row\", x = \"Number of Missing Values\", y = \"Count\") +\n  theme_minimal()\n\n\n\n\n\n\n\n\n\nWe observed that some rows are missing X and Y coordinates, but these rows do not have missing values in other features.",
    "crumbs": [
      "<span class='chapter-number'>2</span>  <span class='chapter-title'>Data</span>"
    ]
  },
  {
    "objectID": "results.html",
    "href": "results.html",
    "title": "3  Results",
    "section": "",
    "text": "Code\nlibrary(ggplot2)\nlibrary(readr)\nlibrary(dplyr)\n\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\n\n\nCode\nlibrary(tidyr)\nlibrary(viridis)\n\n\nLoading required package: viridisLite\n\n\nCode\nlibrary(vcd)\n\n\nLoading required package: grid\n\n\nCode\nlibrary(grid)\nlibrary(ggalluvial)\nlibrary(GGally)\n\n\nRegistered S3 method overwritten by 'GGally':\n  method from   \n  +.gg   ggplot2\n\n\nCode\nlibrary(ggridges)\n\nbuilding &lt;- read_csv(\"Apartment Building Evaluations 2023 - current.csv\")\n\n\nWarning: One or more parsing issues, call `problems()` on your data frame for details,\ne.g.:\n  dat &lt;- vroom(...)\n  problems(dat)\n\n\nRows: 3571 Columns: 71\n\n\n── Column specification ────────────────────────────────────────────────────────\nDelimiter: \",\"\nchr  (39): PROPERTY TYPE, WARD, WARDNAME, SITE ADDRESS, EXTERIOR GROUNDS, FE...\ndbl  (31): _id, RSN, YEAR REGISTERED, YEAR BUILT, YEAR EVALUATED, CONFIRMED ...\ndate  (1): EVALUATION COMPLETED ON\n\nℹ Use `spec()` to retrieve the full column specification for this data.\nℹ Specify the column types or set `show_col_types = FALSE` to quiet this message.\n\n\nCode\n# List of all columns containing \"N/A\"\ncolumns_to_clean &lt;- c(\n  \"FENCING\", \"RETAINING WALLS\", \"CATCH BASINS / STORM DRAINAGE\", \"BALCONY GUARDS\",\n  \"EXT. RECEPTACLE STORAGE AREA\", \"CLOTHING DROP BOXES\", \"ACCESSORY BUILDINGS\",\n  \"INTERCOM\", \"LAUNDRY ROOM\", \"INT. RECEPTACLE STORAGE AREA\", \"MAIL RECEPTACLES\",\n  \"EXTERIOR DOORS\", \"STORAGE AREAS/LOCKERS MAINT.\", \"POOLS\", \"OTHER AMENITIES\",\n  \"PARKING AREAS\", \"GARBAGE/COMPACTOR ROOM\", \"ELEVATOR MAINTENANCE\",\n  \"ELEVATOR COSMETICS\", \"COMMON AREA VENTILATION\", \"CHUTE ROOMS - MAINTENANCE\",\n  \"EXTERIOR GROUNDS\", \"BUILDING EXTERIOR\", \"WINDOWS\", \"EXTERIOR WALKWAYS\",\n  \"LOBBY - WALLS AND CEILING\", \"LOBBY FLOORS\", \"INT. HALLWAY - WALLS / CEILING\",\n  \"INTERIOR HALLWAY FLOORS\", \"INT. LOBBY / HALLWAY LIGHTING\",\n  \"ELECTRICAL SERVICES / OUTLETS\", \"STAIRWELL - WALLS AND CEILING\",\n  \"STAIRWELL - LANDING AND STEPS\", \"STAIRWELL LIGHTING\",\n  \"INT. HANDRAIL / GUARD - SAFETY\", \"INT. HANDRAIL / GUARD - MAINT.\"\n)\n\n# Replace \"N/A\" with NA in the specified columns\nbuilding[columns_to_clean] &lt;- lapply(building[columns_to_clean], function(column) {\n  column[column == \"N/A\"] &lt;- NA\n  return(column)\n})\n\nfor (column in columns_to_clean) {\n  missing_count &lt;- sum(is.na(building[[column]]))\n  \n  if (missing_count &gt; 100) {\n    building[[column]] &lt;- NULL\n  } else {\n    building[[column]][is.na(building[[column]])] &lt;- median(building[[column]], na.rm = TRUE)\n  }\n}\n\n\nWarning in mean.default(sort(x, partial = half + 0L:1L)[half + 0L:1L]):\nargument is not numeric or logical: returning NA\n\n\nWarning in mean.default(sort(x, partial = half + 0L:1L)[half + 0L:1L]):\nargument is not numeric or logical: returning NA\nWarning in mean.default(sort(x, partial = half + 0L:1L)[half + 0L:1L]):\nargument is not numeric or logical: returning NA\nWarning in mean.default(sort(x, partial = half + 0L:1L)[half + 0L:1L]):\nargument is not numeric or logical: returning NA\nWarning in mean.default(sort(x, partial = half + 0L:1L)[half + 0L:1L]):\nargument is not numeric or logical: returning NA\nWarning in mean.default(sort(x, partial = half + 0L:1L)[half + 0L:1L]):\nargument is not numeric or logical: returning NA\n\n\n\n\nCode\n# For 'year_built' and 'year_registered', impute with median\nbuilding$`YEAR BUILT`[is.na(building$`YEAR BUILT`)] &lt;- median(building$`YEAR BUILT`, na.rm = TRUE)\nbuilding$`YEAR REGISTERED`[is.na(building$`YEAR REGISTERED`)] &lt;- median(building$`YEAR REGISTERED`, na.rm = TRUE)\n\n# For 'x' and 'y', impute with mean\nbuilding$X[is.na(building$X)] &lt;- mean(building$X, na.rm = TRUE)\nbuilding$Y[is.na(building$Y)] &lt;- mean(building$Y, na.rm = TRUE)\n\n# Exclude 'logitude' and 'latitude' columns\nbuilding &lt;- building[, !colnames(building) %in% c(\"logitude\", \"latitude\")]\n\n# Rename 'PROPRTTY TYPE' for future plot\nbuilding &lt;- building |&gt;\n  rename(PROPERTYTYPE = `PROPERTY TYPE`)\n\n\n\n\nCode\nggplot(building, aes(x = `CURRENT BUILDING EVAL SCORE`)) +\n  geom_histogram(\n    aes(y = ..density..),\n    binwidth = 3,\n    fill = \"skyblue\",\n    color = \"white\",\n    alpha = 0.8\n  ) +\n  geom_density(\n    color = \"darkred\",\n    size = 1.2,\n    linetype = \"dashed\"\n  ) +\n  labs(\n    title = \"Distribution of Current Building Evaluation Scores\",\n    subtitle = \"Histogram with density overlay\",\n    x = \"Current Condo Evaluation Scores\",\n    y = \"Density\"\n  ) +\n  theme_minimal() +\n  theme(\n    plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5),\n    plot.subtitle = element_text(size = 12, face = \"italic\", hjust = 0.5),\n    axis.text = element_text(size = 10),\n    axis.title = element_text(size = 12, face = \"bold\")\n  )\n\n\nWarning: Using `size` aesthetic for lines was deprecated in ggplot2 3.4.0.\nℹ Please use `linewidth` instead.\n\n\nWarning: The dot-dot notation (`..density..`) was deprecated in ggplot2 3.4.0.\nℹ Please use `after_stat(density)` instead.\n\n\n\n\n\n\n\n\n\n\n\nCode\ncleveland_data &lt;- building |&gt;\n  filter(!is.na(`CURRENT BUILDING EVAL SCORE`), !is.na(WARDNAME), !is.na(PROPERTYTYPE))\n\nward_scores &lt;- cleveland_data |&gt;\n  group_by(WARDNAME, PROPERTYTYPE) |&gt;\n  summarise(AverageScore = mean(`CURRENT BUILDING EVAL SCORE`, na.rm = TRUE)) |&gt;\n  arrange(AverageScore)\n\n\n`summarise()` has grouped output by 'WARDNAME'. You can override using the\n`.groups` argument.\n\n\nCode\nggplot(ward_scores, aes(x = AverageScore, y = reorder(WARDNAME, AverageScore), color = PROPERTYTYPE)) +\n  geom_point(size = 3, alpha = 0.6) + \n  geom_segment(aes(x = min(AverageScore), xend = AverageScore, \n                   y = reorder(WARDNAME, AverageScore), \n                   yend = reorder(WARDNAME, AverageScore)),\n               color = \"grey70\", size = 0.5) + \n  labs(\n    title = \"Cleveland Dot Plot of Evaluation Scores\",\n    subtitle = \"Comparison of average scores across wards, colored by property type\",\n    x = \"Average Current Building Evaluation Score\",\n    y = \"Ward Name\",\n    color = \"Property Type\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n    plot.title = element_text(hjust = 0.5, face = \"bold\", size = 18, color = \"#333333\"),\n    plot.subtitle = element_text(hjust = 0.5, size = 14, color = \"#666666\"),\n    axis.text.x = element_text(size = 12, color = \"#333333\"),\n    axis.text.y = element_text(size = 12, color = \"#333333\"),\n    axis.title.x = element_text(size = 14, face = \"bold\", color = \"#333333\"),\n    axis.title.y = element_text(size = 14, face = \"bold\", color = \"#333333\"),\n    panel.grid.major.x = element_line(color = \"grey90\"),\n    panel.grid.minor.x = element_blank(),\n    panel.grid.major.y = element_blank()\n  ) +\n  scale_color_viridis_d() \n\n\n\n\n\n\n\n\n\n\n\nCode\nfiltered_data &lt;- building |&gt;\n  filter(!is.na(WARDNAME) & !is.na(`CURRENT BUILDING EVAL SCORE`))\n\nggplot(data = filtered_data, aes(\n  x = `CURRENT BUILDING EVAL SCORE`,\n  y = WARDNAME,\n  fill = WARDNAME\n)) +\n  geom_density_ridges(scale = 2, alpha = 0.8) + \n  scale_fill_viridis_d(option = \"plasma\") + \n  labs(\n    title = \"Ridgeline Plot of Current Eval Scores\",\n    x = \"Current Building Evaluation Score\",\n    y = \"Ward Name\",\n    fill = \"Ward\"\n  ) +\n  theme_minimal(base_size = 16) +\n  theme(\n    plot.title = element_text(hjust = 0.5, size = 20, face = \"bold\"),\n    axis.text.x = element_text(size = 12, angle = 0),\n    axis.text.y = element_text(size = 12),\n    axis.title.x = element_text(size = 14, face = \"bold\"),\n    axis.title.y = element_text(size = 14, face = \"bold\"),\n    legend.position = \"none\" \n  )\n\n\nPicking joint bandwidth of 2.52\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(building, aes(x = `CURRENT BUILDING EVAL SCORE`, y = `PROACTIVE BUILDING SCORE`)) +\n  geom_point(color = \"skyblue\", size = 2, alpha = 0.7) +  \n  geom_smooth(method = \"lm\", color = \"darkred\", linetype = \"solid\", size = 1) +  \n  facet_wrap(~ PROPERTYTYPE, scales = \"free\") +  \n  labs(\n    title = \"Proactive Building Score vs Current Evaluation Score\",\n    subtitle = \"Faceted by Property Type\",\n    x = \"Current Building Evaluation Score\",\n    y = \"Proactive Building Score\"\n  ) +\n  theme_minimal(base_size = 14) +  \n  theme(\n    strip.text = element_text(size = 14, face = \"bold\", color = \"black\"),  \n    plot.title = element_text(size = 18, face = \"bold\", hjust = 0.5),  \n    plot.subtitle = element_text(size = 14, face = \"italic\", hjust = 0.5, color = \"gray40\"),  \n    axis.title = element_text(size = 14, face = \"bold\"),  \n    axis.text = element_text(size = 12),  \n    panel.grid = element_line(color = \"gray80\", linetype = \"dotted\"),  \n    legend.position = \"none\"  \n  )\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(building, aes(x = `YEAR BUILT`, y = `CURRENT BUILDING EVAL SCORE`)) +\n  stat_bin2d(\n    bins = 50,              \n    aes(fill = ..count..)\n  ) +\n  scale_fill_gradientn(\n    colors = viridis::turbo(10), \n    name = \"Building Count\"\n  ) +\n  labs(\n    title = \"Building Evaluation Scores by Year Built\",\n    subtitle = \"Density of Buildings Evaluated Across Different Years\",\n    x = \"Year Built\",\n    y = \"Building Evaluation Score\"\n  ) +\n  theme_minimal(base_size = 16) +\n  theme(\n    plot.title = element_text(\n      size = 22, face = \"bold\", hjust = 0.5, color = \"#333333\"\n    ),\n    plot.subtitle = element_text(\n      size = 16, hjust = 0.5, color = \"#555555\"\n    ),\n    axis.title.x = element_text(size = 14, face = \"bold\"),\n    axis.title.y = element_text(size = 14, face = \"bold\"),\n    axis.text = element_text(size = 12, color = \"#333333\"),\n    legend.title = element_text(size = 12, face = \"bold\"),\n    legend.text = element_text(size = 10),\n    panel.grid.major = element_line(color = \"gray85\", size = 0.5),\n    panel.grid.minor = element_blank()\n  )\n\n\nWarning: The `size` argument of `element_line()` is deprecated as of ggplot2 3.4.0.\nℹ Please use the `linewidth` argument instead.\n\n\n\n\n\n\n\n\n\n\n\nCode\nggplot(building, aes(x = `YEAR BUILT`, y = `CURRENT BUILDING EVAL SCORE`)) +\n  geom_point(color = \"dodgerblue\", alpha = 0.6, size = 2) +  \n  geom_smooth(method = \"lm\", color = \"darkred\", linetype = \"dashed\", se = FALSE, size = 1) +  \n  facet_wrap(~ `MAINTENANCE LOG`, ncol = 2) +  \n  labs(\n    title = \"Scatterplot: Current Building Evaluation Score vs Year Built\",\n    subtitle = \"Faceted by Maintenance Log\",\n    x = \"Year Built\",\n    y = \"Current Building Evaluation Score\"\n  ) +\n  theme_minimal(base_size = 14) +  \n  theme(\n    plot.title = element_text(size = 16, face = \"bold\", hjust = 0.5, color = \"darkblue\"),  \n    plot.subtitle = element_text(size = 12, face = \"italic\", hjust = 0.5, color = \"gray40\"),  \n    strip.text = element_text(size = 14, face = \"bold\", color = \"darkgreen\"),  \n    axis.title = element_text(size = 12, face = \"bold\"),\n    axis.text = element_text(size = 10),\n    panel.grid.major = element_line(color = \"gray80\", linetype = \"dotted\"),  \n    panel.grid.minor = element_blank(), \n    panel.background = element_rect(fill = \"white\", color = \"gray90\"),  \n    strip.background = element_rect(fill = \"lightgray\", color = \"gray70\"),  \n    plot.margin = margin(t = 10, r = 10, b = 10, l = 10)  \n  )\n\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\n\n\n\n\n\n\n\n\n\nCode\nbuilding &lt;- building |&gt;\n  mutate(\n    old_or_new = ifelse(`YEAR BUILT` &gt; 1960, \"new\", \"old\"),\n    high_or_low = ifelse(\n      `CURRENT BUILDING EVAL SCORE` &gt;= mean(`CURRENT BUILDING EVAL SCORE`, na.rm = TRUE),\n      \"high\", \"low\"\n    )\n  )\n\nmosaic(\n  ~ high_or_low + old_or_new + PROPERTYTYPE, \n  data = building,\n  highlighting = \"PROPERTYTYPE\",\n  highlighting_fill = c(\"#ADD8E6\", \"#4682B4\", \"#00008B\"),  \n  direction = c(\"v\", \"v\", \"h\"),  \n  main = \"Mosaic Plot of Building Characteristics\",\n  sub = \"Split by Evaluation Score, Year Built, and Property Type\",\n  labeling_args = list(\n    gp_labels = gpar(fontsize = c(10, 8, 6), fontface = \"bold\"),  \n    gp_varnames = gpar(fontsize = 10, fontface = \"bold\", col = \"darkblue\"),  \n    rot_labels = c(0, 0, 45),  \n    just_labels = c(\"center\", \"center\", \"center\")  \n  ),\n  keep_aspect_ratio = FALSE,  \n  margins = unit(c(2, 2, 2, 4), \"lines\")  \n)\n\n\n\n\n\n\n\n\n\n\n\nCode\nbuilding$YearGroup &lt;- cut(\n  building$`YEAR BUILT`,\n  breaks = quantile(building$`YEAR BUILT`, probs = c(0, 1/3, 2/3, 1), na.rm = TRUE),\n  labels = c(\"Early Period\", \"Mid Period\", \"Recent Period\"),\n  include.lowest = TRUE\n)\n\nallu_data &lt;- building |&gt;\n  group_by(YearGroup, PROPERTYTYPE) |&gt;\n  summarise(Count = n()) |&gt;\n  ungroup()\n\n\n`summarise()` has grouped output by 'YearGroup'. You can override using the\n`.groups` argument.\n\n\nCode\nggplot(data = allu_data,\n       aes(x = YearGroup, stratum = PROPERTYTYPE, alluvium = PROPERTYTYPE, y = Count)) +\n  geom_flow(aes(fill = PROPERTYTYPE), curve_type = \"sigmoid\", alpha = 0.8) +\n  geom_stratum(width = 1/8, fill = \"grey\", color = \"black\") +\n  geom_text(stat = \"stratum\", aes(label = after_stat(stratum)), \n            size = 2, color = \"black\", vjust = 0.5) +\n  scale_fill_viridis_d(option = \"plasma\", name = \"Property Type\") +\n  labs(\n    x = \"Year Built Group\",\n    y = \"Count of Properties\",\n    title = \"Alluvial Diagram of Property Types by Year Built Group\"\n  ) +\n  theme_minimal(base_size = 14) +\n  theme(\n  plot.title = element_text(hjust = 0.5, size = 16, face = \"bold\"),\n  axis.text.x = element_text(size = 12, angle = 30, hjust = 1), \n  axis.text.y = element_text(size = 12),\n  axis.title = element_text(size = 14),\n  legend.position = \"right\",\n  legend.title = element_text(size = 12),\n  legend.text = element_text(size = 10)\n)",
    "crumbs": [
      "<span class='chapter-number'>3</span>  <span class='chapter-title'>Results</span>"
    ]
  },
  {
    "objectID": "d3graph.html",
    "href": "d3graph.html",
    "title": "4  Interactive graph",
    "section": "",
    "text": "Early Period\n\n\nMid Period\n\n\nRecent Period",
    "crumbs": [
      "<span class='chapter-number'>4</span>  <span class='chapter-title'>Interactive graph</span>"
    ]
  }
]